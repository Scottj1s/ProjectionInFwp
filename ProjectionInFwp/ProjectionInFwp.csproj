<Project Sdk="Microsoft.NET.Sdk">
    <PropertyGroup>
        <OutputType>WinExe</OutputType>
        <TargetFramework>net5.0-windows10.0.19041.0</TargetFramework>
        <TargetPlatformMinVersion>10.0.17763.0</TargetPlatformMinVersion>
        <RootNamespace>ProjectionInFwp</RootNamespace>
        <ApplicationManifest>app.manifest</ApplicationManifest>
        <Platforms>x86;x64;arm64</Platforms>
        <RuntimeIdentifiers>win10-x86;win10-x64;win10-arm64</RuntimeIdentifiers>
        <UseWinUI>true</UseWinUI>
    </PropertyGroup>

    <ItemGroup>
        
        <Manifest Include="$(ApplicationManifest)" />
        
        <PackageReference Include="Microsoft.ProjectReunion" Version="[0.8.1]" />
        <PackageReference Include="Microsoft.ProjectReunion.Foundation" Version="[0.8.1]" />
        
        <!--Reference a hacked up ProjectReunion.WinUI with no WinUI projection assembly-->
        <PackageReference Include="Microsoft.ProjectReunion.WinUI" Version="[0.8.2-no-projection]" />
        
        <!--Reference a standalone WinUI projection assembly to represent a build-time reference assembly, 
        but don't binplace it, so the app is forced resolve the library from somewhere else.  Use ProcMon to 
        observe locations probed (via ProjectionInFwp.PMF filter). If desired, run build.ps1 to build and
        install a hacked ProjectReunion0.8 FWP containing Microsoft.WinUI.dll, to prove beyond ProcMon
        that the loader won't find it.-->
        <WinUIProjectionAssembly Include="$(MSBuildProjectDirectory)\microsoft.winui.dll" />
        <Reference Include="@(WinUIProjectionAssembly)" />
    </ItemGroup>
    
    <!-- Do not binplace microsoft.winui.dll -->
    <Target Name="RemoveWinUIReferenceCopy" AfterTargets="ResolveAssemblyReferences" Condition="true">
        <ItemGroup>
            <ReferenceCopyLocalPaths Remove="@(WinUIProjectionAssembly)" />
        </ItemGroup>
    </Target>

</Project>
